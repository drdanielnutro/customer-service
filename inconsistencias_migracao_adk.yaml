- arquivo: professor-virtual/professor_virtual/config.py
  referencia: desenvolvedor/architecture.json
  inconsistencias:
    - trecho_incorreto: |
        class AgentModel(BaseModel):
            name: str = Field(default="professor_virtual_agent")
            model: str = Field(default="gemini-2.5-flash")
    - trecho_correto: |
        class AgentModel(BaseModel):
            name: str = Field(default="professor_virtual")
            model: str = Field(default="gemini-2.5-flash")
    - justificativa: >
        No arquivo de arquitetura o campo `name` da configuração do agente é
        definido como "professor_virtual"​:codex-file-citation[codex-file-citation]{line_range_start=8 line_range_end=10 path=desenvolvedor/architecture.json git_url="https://github.com/drdanielnutro/customer-service/blob/migrate-adk-code-to-professor-virtual-2025-07-23-19-59-40/desenvolvedor/architecture.json#L8-L10"}​.
        A implementação define "professor_virtual_agent", violando a
        especificação.

    - trecho_incorreto: |
        class Config(BaseSettings):
            model_config = SettingsConfigDict(
                env_file=os.path.join(
                    os.path.dirname(os.path.abspath(__file__)), "../.env"
                ),
                env_prefix="GOOGLE_",
                case_sensitive=True,
            )
            agent_settings: AgentModel = Field(default=AgentModel())
            app_name: str = "professor_virtual_app"
            CLOUD_PROJECT: str = Field(default="my_project")
            CLOUD_LOCATION: str = Field(default="us-central1")
            GENAI_USE_VERTEXAI: str = Field(default="1")
            API_KEY: str | None = Field(default="")
    - trecho_correto: |
        class Config(BaseSettings):
            model_config = SettingsConfigDict(
                env_file=os.path.join(
                    os.path.dirname(os.path.abspath(__file__)), "../.env"
                ),
                env_prefix="GOOGLE_",
                case_sensitive=True,
            )
            agent_settings: AgentModel = Field(default=AgentModel())
            generate_content_config: dict = Field(
                default={"temperature": 0.7, "max_output_tokens": 1000, "response_mime_type": "text/plain"}
            )
            app_name: str = "professor_virtual_app"
            CLOUD_PROJECT: str = Field(default="my_project")
            CLOUD_LOCATION: str = Field(default="us-central1")
            GENAI_USE_VERTEXAI: str = Field(default="1")
            API_KEY: str | None = Field(default="")
    - justificativa: >
        A arquitetura especifica `generate_content_config` com temperatura,
        número máximo de tokens e MIME type​:codex-file-citation[codex-file-citation]{line_range_start=17 line_range_end=21 path=desenvolvedor/architecture.json git_url="https://github.com/drdanielnutro/customer-service/blob/migrate-adk-code-to-professor-virtual-2025-07-23-19-59-40/desenvolvedor/architecture.json#L17-L21"}​,
        mas a configuração da aplicação não inclui este campo.

- arquivo: professor-virtual/professor_virtual/agent.py
  referencia: desenvolvedor/instruction_providers.py
  inconsistencias:
    - trecho_incorreto: |
        root_agent = Agent(
            model=configs.agent_settings.model,
            global_instruction=GLOBAL_INSTRUCTION,
            instruction=INSTRUCTION,
            name=configs.agent_settings.name,
            tools=[
                transcrever_audio,
                analisar_necessidade_visual,
                analisar_imagem_educacional,
                gerar_audio_tts,
            ],
            before_tool_callback=before_tool,
            after_tool_callback=after_tool,
            before_agent_callback=before_agent,
            before_model_callback=rate_limit_callback,
        )
    - trecho_correto: |
        root_agent = Agent(
            model=configs.agent_settings.model,
            global_instruction="",
            instruction=professor_instruction_provider,
            name=configs.agent_settings.name,
            tools=[
                transcrever_audio,
                analisar_necessidade_visual,
                analisar_imagem_educacional,
                gerar_audio_tts,
            ],
            generate_content_config=configs.generate_content_config,
            before_tool_callback=before_tool,
            after_tool_callback=after_tool,
            before_agent_callback=before_agent,
            before_model_callback=rate_limit_callback,
        )
    - justificativa: >
        A instrução principal deve ser gerada dinamicamente pela função
        `professor_instruction_provider` definida no documento de referência
        ​:codex-file-citation[codex-file-citation]{line_range_start=10 line_range_end=74 path=desenvolvedor/instruction_providers.py git_url="https://github.com/drdanielnutro/customer-service/blob/migrate-adk-code-to-professor-virtual-2025-07-23-19-59-40/desenvolvedor/instruction_providers.py#L10-L74"}​. Além disso,
        a arquitetura prevê o uso de `generate_content_config`
        ​:codex-file-citation[codex-file-citation]{line_range_start=17 line_range_end=21 path=desenvolvedor/architecture.json git_url="https://github.com/drdanielnutro/customer-service/blob/migrate-adk-code-to-professor-virtual-2025-07-23-19-59-40/desenvolvedor/architecture.json#L17-L21"}​, que não é passado ao
        construtor do agente na implementação atual.

- arquivo: professor-virtual/professor_virtual/prompts.py
  referencia: desenvolvedor/instruction_providers.py
  inconsistencias:
    - trecho_incorreto: |
        INSTRUCTION = """\
        # MISSÃO PRINCIPAL
        Você é o Professor Virtual, um assistente educacional amigável, paciente e encorajador, especializado em ajudar crianças. Sua missão é fornecer explicações claras e apropriadas para a idade.
        ...
        """
    - trecho_correto: |
        from .instruction_providers import professor_instruction_provider
        # a constante INSTRUCTION passa a referenciar a função provider
        INSTRUCTION = professor_instruction_provider
    - justificativa: >
        O arquivo de providers define a geração dinâmica das instruções com
        personalização via contexto​:codex-file-citation[codex-file-citation]{line_range_start=10 line_range_end=74 path=desenvolvedor/instruction_providers.py git_url="https://github.com/drdanielnutro/customer-service/blob/migrate-adk-code-to-professor-virtual-2025-07-23-19-59-40/desenvolvedor/instruction_providers.py#L10-L74"}​.
        A implementação fixa o texto, ignorando essa lógica dinâmica.

- arquivo: professor-virtual/professor_virtual/tools/tools.py
  referencia: desenvolvedor/implementation.py
  inconsistencias:
    - trecho_incorreto: |
        class AnaliseVisualResult:
            def __init__(self, necessita_imagem: bool, confianca: float, referencias_encontradas: list[str]):
                self.necessita_imagem = necessita_imagem
                self.confianca = confianca
                self.referencias_encontradas = referencias_encontradas
    - trecho_correto: |
        @dataclass
        class AnaliseVisualResult:
            necessita_imagem: bool
            confianca: float
            referencias_encontradas: list[str]
    - justificativa: >
        O documento de implementação define `AnaliseVisualResult` como um
        `@dataclass` com os mesmos campos​:codex-file-citation[codex-file-citation]{line_range_start=18 line_range_end=23 path=desenvolvedor/implementation.py git_url="https://github.com/drdanielnutro/customer-service/blob/migrate-adk-code-to-professor-virtual-2025-07-23-19-59-40/desenvolvedor/implementation.py#L18-L23"}​,
        porém a versão implementada é uma classe comum, perdendo os benefícios de
        dataclass.

    - trecho_incorreto: |
        # (ausente) class AnaliseImagemResult
    - trecho_correto: |
        @dataclass
        class AnaliseImagemResult:
            tipo_conteudo: str
            elementos_detectados: list[str]
            contexto_educacional: str
            qualidade_adequada: bool
            sugestao_acao: Optional[str]
    - justificativa: >
        A implementação original inclui a dataclass `AnaliseImagemResult`
        para estruturar o resultado de análise de imagem
        ​:codex-file-citation[codex-file-citation]{line_range_start=26 line_range_end=33 path=desenvolvedor/implementation.py git_url="https://github.com/drdanielnutro/customer-service/blob/migrate-adk-code-to-professor-virtual-2025-07-23-19-59-40/desenvolvedor/implementation.py#L26-L33"}​. Esse tipo não está presente
        no código do projeto.

    - trecho_incorreto: |
        pontuacao_visual += len(matches) * 0.2
    - trecho_correto: |
        pontuacao_visual += len(matches) * 0.15
    - justificativa: >
        No cálculo de pontuação de `analisar_necessidade_visual` a
        implementação correta utiliza o fator 0.15​:codex-file-citation[codex-file-citation]{line_range_start=126 line_range_end=133 path=desenvolvedor/implementation.py git_url="https://github.com/drdanielnutro/customer-service/blob/migrate-adk-code-to-professor-virtual-2025-07-23-19-59-40/desenvolvedor/implementation.py#L126-L133"}​.
        O código atual altera para 0.2, modificando o critério de detecção.

    - trecho_incorreto: |
        # (função extrair_contexto_educacional ausente)
    - trecho_correto: |
        def extrair_contexto_educacional(texto: str) -> Dict[str, Any]:
            """Extrai contexto educacional do texto para melhor processamento"""
            materias = {
                "matematica": ["conta", "número", "equação", "calcul", "soma", "multiplicação"],
                "portugues": ["palavra", "frase", "texto", "verbo", "substantivo", "letra"],
                "ciencias": ["animal", "planta", "corpo", "natureza", "experimento"],
                "historia": ["ano", "época", "aconteceu", "passado", "história"],
                "geografia": ["país", "cidade", "mapa", "continente", "oceano"],
            }
            texto_lower = texto.lower()
            materia_detectada = "geral"
            for materia, palavras_chave in materias.items():
                if any(palavra in texto_lower for palavra in palavras_chave):
                    materia_detectada = materia
                    break
            return {
                "materia_provavel": materia_detectada,
                "nivel_complexidade": "basico",
                "tipo_ajuda": "explicacao",
            }
    - justificativa: >
        A função auxiliar `extrair_contexto_educacional` está definida no
        documento de referência para análise de texto
        ​:codex-file-citation[codex-file-citation]{line_range_start=268 line_range_end=288 path=desenvolvedor/implementation.py git_url="https://github.com/drdanielnutro/customer-service/blob/migrate-adk-code-to-professor-virtual-2025-07-23-19-59-40/desenvolvedor/implementation.py#L268-L288"}​, mas não existe na
        implementação fornecida.
