191 ./shared_libraries/callbacks.py
20 ./shared_libraries/__init__.py
48 ./config.py
74 ./agent.py
20 ./__init__.py
13 ./entities/__init__.py
197 ./entities/customer.py
13 ./tools/__init__.py
401 ./tools/tools.py
85 ./prompts.py
FILE: ./shared_libraries/callbacks.py
15:"""Callback functions for FOMC Research Agent."""
37:def rate_limit_callback(
89:def validate_customer_id(customer_id: str, session_state: State) -> Tuple[bool, str]:
116:def lowercase_value(value):
130:def before_tool(
164:def after_tool(
183:def before_agent(callback_context: InvocationContext):

FILE: ./shared_libraries/__init__.py

FILE: ./config.py
26:class AgentModel(BaseModel):
27:    """Agent model settings."""
29:    name: str = Field(default="customer_service_agent")
30:    model: str = Field(default="gemini-2.5-flash")
33:class Config(BaseSettings):
43:    agent_settings: AgentModel = Field(default=AgentModel())
45:    CLOUD_PROJECT: str = Field(default="my_project")
46:    CLOUD_LOCATION: str = Field(default="us-central1")
47:    GENAI_USE_VERTEXAI: str = Field(default="1")
48:    API_KEY: str | None = Field(default="")

FILE: ./agent.py
15:"""Agent module for the customer service agent."""
19:from google.adk import Agent
21:from .prompts import GLOBAL_INSTRUCTION, INSTRUCTION
39:    send_care_instructions,
51:root_agent = Agent(
53:    global_instruction=GLOBAL_INSTRUCTION,
54:    instruction=INSTRUCTION,
67:        send_care_instructions,

FILE: ./__init__.py

FILE: ./entities/__init__.py

FILE: ./entities/customer.py
20:class Address(BaseModel):
32:class Product(BaseModel):
43:class Purchase(BaseModel):
54:class CommunicationPreferences(BaseModel):
65:class GardenProfile(BaseModel):
78:class Customer(BaseModel):
97:    scheduled_appointments: Dict = Field(default_factory=dict)
100:    def to_json(self) -> str:
110:    def get_customer(current_customer_id: str) -> Optional["Customer"]:

FILE: ./tools/__init__.py

FILE: ./tools/tools.py
25:def send_call_companion_link(phone_number: str) -> str:
45:def approve_discount(discount_type: str, value: float, reason: str) -> str:
71:def sync_ask_for_approval(discount_type: str, value: float, reason: str) -> str:
96:def update_salesforce_crm(customer_id: str, details: dict) -> dict:
124:def access_cart_information(customer_id: str) -> dict:
157:def modify_cart(
186:def get_product_recommendations(plant_type: str, customer_id: str) -> dict:
240:def check_product_availability(product_id: str, store_id: str) -> dict:
264:def schedule_planting_service(
306:def get_available_planting_times(date: str) -> list:
325:def send_care_instructions(
328:    """Sends an email or SMS with instructions on how to take care of a specific plant type.
333:        delivery_method: 'email' (default) or 'sms'.
339:        >>> send_care_instructions(customer_id='123', plant_type='Petunias', delivery_method='email')
340:        {'status': 'success', 'message': 'Care instructions for Petunias sent via email.'}
343:        "Sending care instructions for %s to customer: %s via %s",
351:        "message": f"Care instructions for {plant_type} sent via {delivery_method}.",
355:def generate_qr_code(
366:        discount_type: "percentage" (default) or "fixed".
379:    # Defense-in-depth to prevent malicious prompts that could circumvent system instructions and

FILE: ./prompts.py
15:"""Global instruction and instruction for the customer service agent."""
58:    *   Send plant care instructions relevant to the customer's purchases and location.
65:*   `approve_discount: Approves a discount (within pre-defined limits).
74:*   `send_care_instructions: Sends plant care information.

